From d082deaaf46a49f17f59c313323c7c07ad6102c0 Mon Sep 17 00:00:00 2001
From: Matthew <matthew.steglinski@utoronto.ca>
Date: Wed, 9 Aug 2017 22:59:44 -0400
Subject: [PATCH] Implement setting world spawnpoint yaw and pitch


diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
index afa674f5..4e21f55c 100644
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -82,7 +82,7 @@ public abstract class EntityHuman extends EntityLiving implements ICommandListen
         this.height = 1.62F;
         ChunkCoordinates chunkcoordinates = world.getSpawn();
 
-        this.setPositionRotation((double) chunkcoordinates.x + 0.5D, (double) (chunkcoordinates.y + 1), (double) chunkcoordinates.z + 0.5D, 0.0F, 0.0F);
+        this.setPositionRotation((double) chunkcoordinates.x + 0.5D, (double) (chunkcoordinates.y + 1), (double) chunkcoordinates.z + 0.5D, world.getWorldData().getSpawnYaw(), world.getWorldData().getSpawnPitch());
         this.aZ = 180.0F;
         this.maxFireTicks = 20;
     }
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index 7f0dad13..a8e59270 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -105,8 +105,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         this.bO = minecraftserver.getPlayerList().a((EntityHuman) this);
         this.W = 0.0F;
         this.height = 0.0F;
-        this.setPositionRotation((double) i + 0.5D, (double) k, (double) j + 0.5D, 0.0F, 0.0F);
-
+        this.setPositionRotation((double) i + 0.5D, (double) k, (double) j + 0.5D, worldserver.getWorldData().getSpawnYaw(), worldserver.getWorldData().getSpawnPitch());
         while (!worldserver.getCubes(this, this.boundingBox).isEmpty()) {
             this.setPosition(this.locX, this.locY + 1.0D, this.locZ);
         }
@@ -143,6 +142,8 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         if (world == null) {
             this.dead = false;
             ChunkCoordinates position = null;
+            float yaw = 0;
+            float pitch = 0;
             if (this.spawnWorld != null && !this.spawnWorld.equals("")) {
                 CraftWorld cworld = (CraftWorld) Bukkit.getServer().getWorld(this.spawnWorld);
                 if (cworld != null && this.getBed() != null) {
@@ -153,9 +154,11 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             if (world == null || position == null) {
                 world = ((CraftWorld) Bukkit.getServer().getWorlds().get(0)).getHandle();
                 position = world.getSpawn();
+                yaw = world.getWorldData().getSpawnYaw();
+                pitch = world.getWorldData().getSpawnPitch();
             }
             this.world = world;
-            this.setPosition(position.x + 0.5, position.y, position.z + 0.5);
+            this.setPositionRotation(position.x + 0.5, position.y, position.z + 0.5, yaw, pitch);
         }
         this.dimension = ((WorldServer) this.world).dimension;
         this.playerInteractManager.a((WorldServer) world);
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 3cb395c1..f2941a50 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -554,7 +554,7 @@ public abstract class PlayerList {
             if (location == null) {
                 cworld = (CraftWorld) this.server.server.getWorlds().get(0);
                 chunkcoordinates = cworld.getHandle().getSpawn();
-                location = new Location(cworld, chunkcoordinates.x + 0.5, chunkcoordinates.y, chunkcoordinates.z + 0.5);
+                location = new Location(cworld, chunkcoordinates.x + 0.5, chunkcoordinates.y, chunkcoordinates.z + 0.5, cworld.getHandle().getWorldData().getSpawnYaw(), cworld.getHandle().getWorldData().getSpawnPitch());
             }
 
             Player respawnPlayer = this.cserver.getPlayer(entityplayer1);
diff --git a/src/main/java/net/minecraft/server/WorldData.java b/src/main/java/net/minecraft/server/WorldData.java
new file mode 100644
index 00000000..97b34b66
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WorldData.java
@@ -0,0 +1,437 @@
+package net.minecraft.server;
+
+import java.util.concurrent.Callable;
+
+public class WorldData {
+
+    private long seed;
+    private WorldType type;
+    private String generatorOptions;
+    private int spawnX;
+    private int spawnY;
+    private int spawnZ;
+    private float spawnYaw;
+    private float spawnPitch;
+    private long time;
+    private long dayTime;
+    private long lastPlayed;
+    private long sizeOnDisk;
+    private NBTTagCompound playerData;
+    private int dimension;
+    private String name;
+    private int version;
+    private boolean isRaining;
+    private int rainTicks;
+    private boolean isThundering;
+    private int thunderTicks;
+    private EnumGamemode gameType;
+    private boolean useMapFeatures;
+    private boolean hardcore;
+    private boolean allowCommands;
+    private boolean initialized;
+    private GameRules gameRules;
+
+    protected WorldData() {
+        this.type = WorldType.NORMAL;
+        this.generatorOptions = "";
+        this.gameRules = new GameRules();
+    }
+
+    public WorldData(NBTTagCompound nbttagcompound) {
+        this.type = WorldType.NORMAL;
+        this.generatorOptions = "";
+        this.gameRules = new GameRules();
+        this.seed = nbttagcompound.getLong("RandomSeed");
+        if (nbttagcompound.hasKeyOfType("generatorName", 8)) {
+            String s = nbttagcompound.getString("generatorName");
+
+            this.type = WorldType.getType(s);
+            if (this.type == null) {
+                this.type = WorldType.NORMAL;
+            } else if (this.type.f()) {
+                int i = 0;
+
+                if (nbttagcompound.hasKeyOfType("generatorVersion", 99)) {
+                    i = nbttagcompound.getInt("generatorVersion");
+                }
+
+                this.type = this.type.a(i);
+            }
+
+            if (nbttagcompound.hasKeyOfType("generatorOptions", 8)) {
+                this.generatorOptions = nbttagcompound.getString("generatorOptions");
+            }
+        }
+
+        this.gameType = EnumGamemode.getById(nbttagcompound.getInt("GameType"));
+        if (nbttagcompound.hasKeyOfType("MapFeatures", 99)) {
+            this.useMapFeatures = nbttagcompound.getBoolean("MapFeatures");
+        } else {
+            this.useMapFeatures = true;
+        }
+
+        this.spawnX = nbttagcompound.getInt("SpawnX");
+        this.spawnY = nbttagcompound.getInt("SpawnY");
+        this.spawnZ = nbttagcompound.getInt("SpawnZ");
+        this.spawnYaw = nbttagcompound.getFloat("SpawnYaw");
+        this.spawnPitch = nbttagcompound.getFloat("SpawnPitch");
+        this.time = nbttagcompound.getLong("Time");
+        if (nbttagcompound.hasKeyOfType("DayTime", 99)) {
+            this.dayTime = nbttagcompound.getLong("DayTime");
+        } else {
+            this.dayTime = this.time;
+        }
+
+        this.lastPlayed = nbttagcompound.getLong("LastPlayed");
+        this.sizeOnDisk = nbttagcompound.getLong("SizeOnDisk");
+        this.name = nbttagcompound.getString("LevelName");
+        this.version = nbttagcompound.getInt("version");
+        this.rainTicks = nbttagcompound.getInt("rainTime");
+        this.isRaining = nbttagcompound.getBoolean("raining");
+        this.thunderTicks = nbttagcompound.getInt("thunderTime");
+        this.isThundering = nbttagcompound.getBoolean("thundering");
+        this.hardcore = nbttagcompound.getBoolean("hardcore");
+        if (nbttagcompound.hasKeyOfType("initialized", 99)) {
+            this.initialized = nbttagcompound.getBoolean("initialized");
+        } else {
+            this.initialized = true;
+        }
+
+        if (nbttagcompound.hasKeyOfType("allowCommands", 99)) {
+            this.allowCommands = nbttagcompound.getBoolean("allowCommands");
+        } else {
+            this.allowCommands = this.gameType == EnumGamemode.CREATIVE;
+        }
+
+        if (nbttagcompound.hasKeyOfType("Player", 10)) {
+            this.playerData = nbttagcompound.getCompound("Player");
+            this.dimension = this.playerData.getInt("Dimension");
+        }
+
+        if (nbttagcompound.hasKeyOfType("GameRules", 10)) {
+            this.gameRules.a(nbttagcompound.getCompound("GameRules"));
+        }
+    }
+
+    public WorldData(WorldSettings worldsettings, String s) {
+        this.type = WorldType.NORMAL;
+        this.generatorOptions = "";
+        this.gameRules = new GameRules();
+        this.seed = worldsettings.d();
+        this.gameType = worldsettings.e();
+        this.useMapFeatures = worldsettings.g();
+        this.name = s;
+        this.hardcore = worldsettings.f();
+        this.type = worldsettings.h();
+        this.generatorOptions = worldsettings.j();
+        this.allowCommands = worldsettings.i();
+        this.initialized = false;
+    }
+
+    public WorldData(WorldData worlddata) {
+        this.type = WorldType.NORMAL;
+        this.generatorOptions = "";
+        this.gameRules = new GameRules();
+        this.seed = worlddata.seed;
+        this.type = worlddata.type;
+        this.generatorOptions = worlddata.generatorOptions;
+        this.gameType = worlddata.gameType;
+        this.useMapFeatures = worlddata.useMapFeatures;
+        this.spawnX = worlddata.spawnX;
+        this.spawnY = worlddata.spawnY;
+        this.spawnZ = worlddata.spawnZ;
+        this.time = worlddata.time;
+        this.dayTime = worlddata.dayTime;
+        this.lastPlayed = worlddata.lastPlayed;
+        this.sizeOnDisk = worlddata.sizeOnDisk;
+        this.playerData = worlddata.playerData;
+        this.dimension = worlddata.dimension;
+        this.name = worlddata.name;
+        this.version = worlddata.version;
+        this.rainTicks = worlddata.rainTicks;
+        this.isRaining = worlddata.isRaining;
+        this.thunderTicks = worlddata.thunderTicks;
+        this.isThundering = worlddata.isThundering;
+        this.hardcore = worlddata.hardcore;
+        this.allowCommands = worlddata.allowCommands;
+        this.initialized = worlddata.initialized;
+        this.gameRules = worlddata.gameRules;
+    }
+
+    public NBTTagCompound a() {
+        NBTTagCompound nbttagcompound = new NBTTagCompound();
+
+        this.a(nbttagcompound, this.playerData);
+        return nbttagcompound;
+    }
+
+    public NBTTagCompound a(NBTTagCompound nbttagcompound) {
+        NBTTagCompound nbttagcompound1 = new NBTTagCompound();
+
+        this.a(nbttagcompound1, nbttagcompound);
+        return nbttagcompound1;
+    }
+
+    private void a(NBTTagCompound nbttagcompound, NBTTagCompound nbttagcompound1) {
+        nbttagcompound.setLong("RandomSeed", this.seed);
+        nbttagcompound.setString("generatorName", this.type.name());
+        nbttagcompound.setInt("generatorVersion", this.type.getVersion());
+        nbttagcompound.setString("generatorOptions", this.generatorOptions);
+        nbttagcompound.setInt("GameType", this.gameType.getId());
+        nbttagcompound.setBoolean("MapFeatures", this.useMapFeatures);
+        nbttagcompound.setInt("SpawnX", this.spawnX);
+        nbttagcompound.setInt("SpawnY", this.spawnY);
+        nbttagcompound.setInt("SpawnZ", this.spawnZ);
+        nbttagcompound.setFloat("SpawnYaw", this.spawnYaw);
+        nbttagcompound.setFloat("SpawnPitch", this.spawnPitch);
+        nbttagcompound.setLong("Time", this.time);
+        nbttagcompound.setLong("DayTime", this.dayTime);
+        nbttagcompound.setLong("SizeOnDisk", this.sizeOnDisk);
+        nbttagcompound.setLong("LastPlayed", MinecraftServer.ar());
+        nbttagcompound.setString("LevelName", this.name);
+        nbttagcompound.setInt("version", this.version);
+        nbttagcompound.setInt("rainTime", this.rainTicks);
+        nbttagcompound.setBoolean("raining", this.isRaining);
+        nbttagcompound.setInt("thunderTime", this.thunderTicks);
+        nbttagcompound.setBoolean("thundering", this.isThundering);
+        nbttagcompound.setBoolean("hardcore", this.hardcore);
+        nbttagcompound.setBoolean("allowCommands", this.allowCommands);
+        nbttagcompound.setBoolean("initialized", this.initialized);
+        nbttagcompound.set("GameRules", this.gameRules.a());
+        if (nbttagcompound1 != null) {
+            nbttagcompound.set("Player", nbttagcompound1);
+        }
+    }
+
+    public long getSeed() {
+        return this.seed;
+    }
+
+    public int c() {
+        return this.spawnX;
+    }
+
+    public int d() {
+        return this.spawnY;
+    }
+
+    public int e() {
+        return this.spawnZ;
+    }
+
+    public float getSpawnYaw() {
+        return spawnYaw;
+    }
+
+    public float getSpawnPitch() {
+        return spawnPitch;
+    }
+
+    public long getTime() {
+        return this.time;
+    }
+
+    public long getDayTime() {
+        return this.dayTime;
+    }
+
+    public NBTTagCompound i() {
+        return this.playerData;
+    }
+
+    public int j() {
+        return this.dimension;
+    }
+
+    public void setTime(long i) {
+        this.time = i;
+    }
+
+    public void setDayTime(long i) {
+        this.dayTime = i;
+    }
+
+    public void setSpawn(int i, int j, int k) {
+        setSpawn(i, j, k, 0, 0);
+    }
+
+    public void setSpawn(int x, int y, int z, float yaw, float pitch) {
+        this.spawnX = x;
+        this.spawnY = y;
+        this.spawnZ = z;
+        this.spawnYaw = yaw;
+        this.spawnPitch = pitch;
+    }
+
+    public String getName() {
+        return this.name;
+    }
+
+    public void setName(String s) {
+        this.name = s;
+    }
+
+    public int l() {
+        return this.version;
+    }
+
+    public void e(int i) {
+        this.version = i;
+    }
+
+    public boolean isThundering() {
+        return this.isThundering;
+    }
+
+    public void setThundering(boolean flag) {
+        this.isThundering = flag;
+    }
+
+    public int getThunderDuration() {
+        return this.thunderTicks;
+    }
+
+    public void setThunderDuration(int i) {
+        this.thunderTicks = i;
+    }
+
+    public boolean hasStorm() {
+        return this.isRaining;
+    }
+
+    public void setStorm(boolean flag) {
+        this.isRaining = flag;
+    }
+
+    public int getWeatherDuration() {
+        return this.rainTicks;
+    }
+
+    public void setWeatherDuration(int i) {
+        this.rainTicks = i;
+    }
+
+    public EnumGamemode getGameType() {
+        return this.gameType;
+    }
+
+    public boolean shouldGenerateMapFeatures() {
+        return this.useMapFeatures;
+    }
+
+    public void setGameType(EnumGamemode enumgamemode) {
+        this.gameType = enumgamemode;
+    }
+
+    public boolean isHardcore() {
+        return this.hardcore;
+    }
+
+    public WorldType getType() {
+        return this.type;
+    }
+
+    public void setType(WorldType worldtype) {
+        this.type = worldtype;
+    }
+
+    public String getGeneratorOptions() {
+        return this.generatorOptions;
+    }
+
+    public boolean allowCommands() {
+        return this.allowCommands;
+    }
+
+    public boolean isInitialized() {
+        return this.initialized;
+    }
+
+    public void d(boolean flag) {
+        this.initialized = flag;
+    }
+
+    public GameRules getGameRules() {
+        return this.gameRules;
+    }
+
+    public void a(CrashReportSystemDetails crashreportsystemdetails) {
+        crashreportsystemdetails.a("Level seed", (Callable) (new CrashReportLevelSeed(this)));
+        crashreportsystemdetails.a("Level generator", (Callable) (new CrashReportLevelGenerator(this)));
+        crashreportsystemdetails.a("Level generator options", (Callable) (new CrashReportLevelGeneratorOptions(this)));
+        crashreportsystemdetails.a("Level spawn location", (Callable) (new CrashReportLevelSpawnLocation(this)));
+        crashreportsystemdetails.a("Level time", (Callable) (new CrashReportLevelTime(this)));
+        crashreportsystemdetails.a("Level dimension", (Callable) (new CrashReportLevelDimension(this)));
+        crashreportsystemdetails.a("Level storage version", (Callable) (new CrashReportLevelStorageVersion(this)));
+        crashreportsystemdetails.a("Level weather", (Callable) (new CrashReportLevelWeather(this)));
+        crashreportsystemdetails.a("Level game mode", (Callable) (new CrashReportLevelGameMode(this)));
+    }
+
+    static WorldType a(WorldData worlddata) {
+        return worlddata.type;
+    }
+
+    static boolean b(WorldData worlddata) {
+        return worlddata.useMapFeatures;
+    }
+
+    static String c(WorldData worlddata) {
+        return worlddata.generatorOptions;
+    }
+
+    static int d(WorldData worlddata) {
+        return worlddata.spawnX;
+    }
+
+    static int e(WorldData worlddata) {
+        return worlddata.spawnY;
+    }
+
+    static int f(WorldData worlddata) {
+        return worlddata.spawnZ;
+    }
+
+    static long g(WorldData worlddata) {
+        return worlddata.time;
+    }
+
+    static long h(WorldData worlddata) {
+        return worlddata.dayTime;
+    }
+
+    static int i(WorldData worlddata) {
+        return worlddata.dimension;
+    }
+
+    static int j(WorldData worlddata) {
+        return worlddata.version;
+    }
+
+    static int k(WorldData worlddata) {
+        return worlddata.rainTicks;
+    }
+
+    static boolean l(WorldData worlddata) {
+        return worlddata.isRaining;
+    }
+
+    static int m(WorldData worlddata) {
+        return worlddata.thunderTicks;
+    }
+
+    static boolean n(WorldData worlddata) {
+        return worlddata.isThundering;
+    }
+
+    static EnumGamemode o(WorldData worlddata) {
+        return worlddata.gameType;
+    }
+
+    static boolean p(WorldData worlddata) {
+        return worlddata.hardcore;
+    }
+
+    static boolean q(WorldData worlddata) {
+        return worlddata.allowCommands;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 3fc108ee..ade94834 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -750,7 +750,7 @@ public class WorldServer extends World {
                     if (spawn.getWorld() != ((WorldServer) this).getWorld()) {
                         throw new IllegalStateException("Cannot set spawn point for " + this.worldData.getName() + " to be in another world (" + spawn.getWorld().getName() + ")");
                     } else {
-                        this.worldData.setSpawn(spawn.getBlockX(), spawn.getBlockY(), spawn.getBlockZ());
+                        this.worldData.setSpawn(spawn.getBlockX(), spawn.getBlockY(), spawn.getBlockZ(), spawn.getYaw(), spawn.getPitch());
                         this.isLoading = false;
                         return;
                     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 1babd797..519bf6ef 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -99,13 +99,17 @@ public class CraftWorld implements World {
 
     public Location getSpawnLocation() {
         ChunkCoordinates spawn = world.getSpawn();
-        return new Location(this, spawn.x, spawn.y, spawn.z);
+        return new Location(this, spawn.x, spawn.y, spawn.z, world.getWorldData().getSpawnYaw(), world.getWorldData().getSpawnPitch());
     }
 
     public boolean setSpawnLocation(int x, int y, int z) {
+        return setSpawnLocation(x, y, z, 0, 0);
+    }
+
+    public boolean setSpawnLocation(int x, int y, int z, float yaw, float pitch) {
         try {
             Location previousLocation = getSpawnLocation();
-            world.worldData.setSpawn(x, y, z);
+            world.worldData.setSpawn(x, y, z, yaw, pitch);
 
             // Notify anyone who's listening.
             SpawnChangeEvent event = new SpawnChangeEvent(this, previousLocation);
-- 
2.11.0

